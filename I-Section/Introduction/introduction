1.Why Python??
Python enables programs to be written compactly and readably. Programs written in Python are typically much
shorter than equivalent C, C++, or Java programs, for several reasons:
• the high-level data types allow you to express complex operations in a single statement;
• statement grouping is done by indentation instead of beginning and ending brackets;
• no variable or argument declarations are necessary.
Python is extensible: if you know how to program in C it is easy to add a new built-in function or module to the
interpreter, either to perform critical operations at maximum speed, or to link Python programs to libraries that
may only be available in binary form (such as a vendor-specific graphics library). Once you are really hooked, you
can link the Python interpreter into an application written in C and use it as an extension or command language
for that application.
2.How does interpreter Works??
When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings
and assigned to the argv variable in the sys module. You can access this list by executing import sys .
The length of the list is at least one; when no script and no arguments are given, sys.argv[0] is an empty
string. When the script name is given as '-' (meaning standard input), sys.argv[0] is set to '-' . When
-c command is used, sys.argv[0] is set to '-c' . When -m module is used, sys.argv[0] is set to
the full name of the located module. Options found after -c command or -m module are not consumed by the
Python interpreter’s option processing but left in sys.argv for the command or module to handle.
